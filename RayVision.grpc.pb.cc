// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RayVision.proto

#include "RayVision.pb.h"
#include "RayVision.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace rayvisiongrpc {

static const char* RayVisionGrpc_method_names[] = {
  "/rayvisiongrpc.RayVisionGrpc/GetImage",
  "/rayvisiongrpc.RayVisionGrpc/doSegmentation",
};

std::unique_ptr< RayVisionGrpc::Stub> RayVisionGrpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RayVisionGrpc::Stub> stub(new RayVisionGrpc::Stub(channel, options));
  return stub;
}

RayVisionGrpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetImage_(RayVisionGrpc_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doSegmentation_(RayVisionGrpc_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status RayVisionGrpc::Stub::GetImage(::grpc::ClientContext* context, const ::rayvisiongrpc::GetImageRequest& request, ::rayvisiongrpc::ImageData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rayvisiongrpc::GetImageRequest, ::rayvisiongrpc::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetImage_, context, request, response);
}

void RayVisionGrpc::Stub::async::GetImage(::grpc::ClientContext* context, const ::rayvisiongrpc::GetImageRequest* request, ::rayvisiongrpc::ImageData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rayvisiongrpc::GetImageRequest, ::rayvisiongrpc::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, std::move(f));
}

void RayVisionGrpc::Stub::async::GetImage(::grpc::ClientContext* context, const ::rayvisiongrpc::GetImageRequest* request, ::rayvisiongrpc::ImageData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rayvisiongrpc::ImageData>* RayVisionGrpc::Stub::PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::rayvisiongrpc::GetImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rayvisiongrpc::ImageData, ::rayvisiongrpc::GetImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rayvisiongrpc::ImageData>* RayVisionGrpc::Stub::AsyncGetImageRaw(::grpc::ClientContext* context, const ::rayvisiongrpc::GetImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::rayvisiongrpc::SegmentationResult>* RayVisionGrpc::Stub::doSegmentationRaw(::grpc::ClientContext* context, const ::rayvisiongrpc::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::rayvisiongrpc::SegmentationResult>::Create(channel_.get(), rpcmethod_doSegmentation_, context, request);
}

void RayVisionGrpc::Stub::async::doSegmentation(::grpc::ClientContext* context, const ::rayvisiongrpc::Empty* request, ::grpc::ClientReadReactor< ::rayvisiongrpc::SegmentationResult>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::rayvisiongrpc::SegmentationResult>::Create(stub_->channel_.get(), stub_->rpcmethod_doSegmentation_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::rayvisiongrpc::SegmentationResult>* RayVisionGrpc::Stub::AsyncdoSegmentationRaw(::grpc::ClientContext* context, const ::rayvisiongrpc::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rayvisiongrpc::SegmentationResult>::Create(channel_.get(), cq, rpcmethod_doSegmentation_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::rayvisiongrpc::SegmentationResult>* RayVisionGrpc::Stub::PrepareAsyncdoSegmentationRaw(::grpc::ClientContext* context, const ::rayvisiongrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::rayvisiongrpc::SegmentationResult>::Create(channel_.get(), cq, rpcmethod_doSegmentation_, context, request, false, nullptr);
}

RayVisionGrpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RayVisionGrpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RayVisionGrpc::Service, ::rayvisiongrpc::GetImageRequest, ::rayvisiongrpc::ImageData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RayVisionGrpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rayvisiongrpc::GetImageRequest* req,
             ::rayvisiongrpc::ImageData* resp) {
               return service->GetImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RayVisionGrpc_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RayVisionGrpc::Service, ::rayvisiongrpc::Empty, ::rayvisiongrpc::SegmentationResult>(
          [](RayVisionGrpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rayvisiongrpc::Empty* req,
             ::grpc::ServerWriter<::rayvisiongrpc::SegmentationResult>* writer) {
               return service->doSegmentation(ctx, req, writer);
             }, this)));
}

RayVisionGrpc::Service::~Service() {
}

::grpc::Status RayVisionGrpc::Service::GetImage(::grpc::ServerContext* context, const ::rayvisiongrpc::GetImageRequest* request, ::rayvisiongrpc::ImageData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RayVisionGrpc::Service::doSegmentation(::grpc::ServerContext* context, const ::rayvisiongrpc::Empty* request, ::grpc::ServerWriter< ::rayvisiongrpc::SegmentationResult>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rayvisiongrpc
#include <grpcpp/ports_undef.inc>

