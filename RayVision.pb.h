// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: RayVision.proto
// Protobuf C++ Version: 5.29.3

#ifndef RayVision_2eproto_2epb_2eh
#define RayVision_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_RayVision_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_RayVision_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_RayVision_2eproto;
namespace rayvisiongrpc {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GetImageRequest;
struct GetImageRequestDefaultTypeInternal;
extern GetImageRequestDefaultTypeInternal _GetImageRequest_default_instance_;
class ImageData;
struct ImageDataDefaultTypeInternal;
extern ImageDataDefaultTypeInternal _ImageData_default_instance_;
class SegmentationResult;
struct SegmentationResultDefaultTypeInternal;
extern SegmentationResultDefaultTypeInternal _SegmentationResult_default_instance_;
}  // namespace rayvisiongrpc
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace rayvisiongrpc {
enum CameraType : int {
  HEAD = 0,
  BODY = 1,
  IR = 2,
  CameraType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CameraType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CameraType_IsValid(int value);
extern const uint32_t CameraType_internal_data_[];
constexpr CameraType CameraType_MIN = static_cast<CameraType>(0);
constexpr CameraType CameraType_MAX = static_cast<CameraType>(2);
constexpr int CameraType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CameraType_descriptor();
template <typename T>
const std::string& CameraType_Name(T value) {
  static_assert(std::is_same<T, CameraType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CameraType_Name().");
  return CameraType_Name(static_cast<CameraType>(value));
}
template <>
inline const std::string& CameraType_Name(CameraType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CameraType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CameraType_Parse(absl::string_view name, CameraType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraType>(
      CameraType_descriptor(), name, value);
}
enum ColorSpace : int {
  RGB = 0,
  GRAY = 1,
  ColorSpace_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ColorSpace_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ColorSpace_IsValid(int value);
extern const uint32_t ColorSpace_internal_data_[];
constexpr ColorSpace ColorSpace_MIN = static_cast<ColorSpace>(0);
constexpr ColorSpace ColorSpace_MAX = static_cast<ColorSpace>(1);
constexpr int ColorSpace_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
ColorSpace_descriptor();
template <typename T>
const std::string& ColorSpace_Name(T value) {
  static_assert(std::is_same<T, ColorSpace>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ColorSpace_Name().");
  return ColorSpace_Name(static_cast<ColorSpace>(value));
}
template <>
inline const std::string& ColorSpace_Name(ColorSpace value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ColorSpace_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool ColorSpace_Parse(absl::string_view name, ColorSpace* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColorSpace>(
      ColorSpace_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ImageData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rayvisiongrpc.ImageData) */ {
 public:
  inline ImageData() : ImageData(nullptr) {}
  ~ImageData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ImageData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ImageData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ImageData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ImageData(const ImageData& from) : ImageData(nullptr, from) {}
  inline ImageData(ImageData&& from) noexcept
      : ImageData(nullptr, std::move(from)) {}
  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageData& operator=(ImageData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageData* internal_default_instance() {
    return reinterpret_cast<const ImageData*>(
        &_ImageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ImageData& a, ImageData& b) { a.Swap(&b); }
  inline void Swap(ImageData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ImageData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ImageData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ImageData& from) { ImageData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ImageData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rayvisiongrpc.ImageData"; }

 protected:
  explicit ImageData(::google::protobuf::Arena* arena);
  ImageData(::google::protobuf::Arena* arena, const ImageData& from);
  ImageData(::google::protobuf::Arena* arena, ImageData&& from) noexcept
      : ImageData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBufferFieldNumber = 4,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kColorspaceFieldNumber = 3,
  };
  // bytes buffer = 4;
  void clear_buffer() ;
  const std::string& buffer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_buffer(Arg_&& arg, Args_... args);
  std::string* mutable_buffer();
  PROTOBUF_NODISCARD std::string* release_buffer();
  void set_allocated_buffer(std::string* value);

  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(
      const std::string& value);
  std::string* _internal_mutable_buffer();

  public:
  // int32 width = 1;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // int32 height = 2;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // .rayvisiongrpc.ColorSpace colorspace = 3;
  void clear_colorspace() ;
  ::rayvisiongrpc::ColorSpace colorspace() const;
  void set_colorspace(::rayvisiongrpc::ColorSpace value);

  private:
  ::rayvisiongrpc::ColorSpace _internal_colorspace() const;
  void _internal_set_colorspace(::rayvisiongrpc::ColorSpace value);

  public:
  // @@protoc_insertion_point(class_scope:rayvisiongrpc.ImageData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ImageData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr buffer_;
    ::int32_t width_;
    ::int32_t height_;
    int colorspace_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RayVision_2eproto;
};
// -------------------------------------------------------------------

class GetImageRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rayvisiongrpc.GetImageRequest) */ {
 public:
  inline GetImageRequest() : GetImageRequest(nullptr) {}
  ~GetImageRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetImageRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetImageRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetImageRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetImageRequest(const GetImageRequest& from) : GetImageRequest(nullptr, from) {}
  inline GetImageRequest(GetImageRequest&& from) noexcept
      : GetImageRequest(nullptr, std::move(from)) {}
  inline GetImageRequest& operator=(const GetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageRequest& operator=(GetImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImageRequest* internal_default_instance() {
    return reinterpret_cast<const GetImageRequest*>(
        &_GetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GetImageRequest& a, GetImageRequest& b) { a.Swap(&b); }
  inline void Swap(GetImageRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImageRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetImageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetImageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetImageRequest& from) { GetImageRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetImageRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rayvisiongrpc.GetImageRequest"; }

 protected:
  explicit GetImageRequest(::google::protobuf::Arena* arena);
  GetImageRequest(::google::protobuf::Arena* arena, const GetImageRequest& from);
  GetImageRequest(::google::protobuf::Arena* arena, GetImageRequest&& from) noexcept
      : GetImageRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTypeFieldNumber = 1,
  };
  // .rayvisiongrpc.CameraType type = 1;
  void clear_type() ;
  ::rayvisiongrpc::CameraType type() const;
  void set_type(::rayvisiongrpc::CameraType value);

  private:
  ::rayvisiongrpc::CameraType _internal_type() const;
  void _internal_set_type(::rayvisiongrpc::CameraType value);

  public:
  // @@protoc_insertion_point(class_scope:rayvisiongrpc.GetImageRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetImageRequest& from_msg);
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RayVision_2eproto;
};
// -------------------------------------------------------------------

class Empty final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:rayvisiongrpc.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Empty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Empty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Empty(const Empty& from) : Empty(nullptr, from) {}
  inline Empty(Empty&& from) noexcept
      : Empty(nullptr, std::move(from)) {}
  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
        &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rayvisiongrpc.Empty"; }

 protected:
  explicit Empty(::google::protobuf::Arena* arena);
  Empty(::google::protobuf::Arena* arena, const Empty& from);
  Empty(::google::protobuf::Arena* arena, Empty&& from) noexcept
      : Empty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:rayvisiongrpc.Empty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Empty& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_RayVision_2eproto;
};
// -------------------------------------------------------------------

class SegmentationResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:rayvisiongrpc.SegmentationResult) */ {
 public:
  inline SegmentationResult() : SegmentationResult(nullptr) {}
  ~SegmentationResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SegmentationResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SegmentationResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SegmentationResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline SegmentationResult(const SegmentationResult& from) : SegmentationResult(nullptr, from) {}
  inline SegmentationResult(SegmentationResult&& from) noexcept
      : SegmentationResult(nullptr, std::move(from)) {}
  inline SegmentationResult& operator=(const SegmentationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SegmentationResult& operator=(SegmentationResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SegmentationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SegmentationResult* internal_default_instance() {
    return reinterpret_cast<const SegmentationResult*>(
        &_SegmentationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SegmentationResult& a, SegmentationResult& b) { a.Swap(&b); }
  inline void Swap(SegmentationResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SegmentationResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SegmentationResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SegmentationResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SegmentationResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SegmentationResult& from) { SegmentationResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SegmentationResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "rayvisiongrpc.SegmentationResult"; }

 protected:
  explicit SegmentationResult(::google::protobuf::Arena* arena);
  SegmentationResult(::google::protobuf::Arena* arena, const SegmentationResult& from);
  SegmentationResult(::google::protobuf::Arena* arena, SegmentationResult&& from) noexcept
      : SegmentationResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSegmentsFieldNumber = 1,
  };
  // repeated .rayvisiongrpc.ImageData segments = 1;
  int segments_size() const;
  private:
  int _internal_segments_size() const;

  public:
  void clear_segments() ;
  ::rayvisiongrpc::ImageData* mutable_segments(int index);
  ::google::protobuf::RepeatedPtrField<::rayvisiongrpc::ImageData>* mutable_segments();

  private:
  const ::google::protobuf::RepeatedPtrField<::rayvisiongrpc::ImageData>& _internal_segments() const;
  ::google::protobuf::RepeatedPtrField<::rayvisiongrpc::ImageData>* _internal_mutable_segments();
  public:
  const ::rayvisiongrpc::ImageData& segments(int index) const;
  ::rayvisiongrpc::ImageData* add_segments();
  const ::google::protobuf::RepeatedPtrField<::rayvisiongrpc::ImageData>& segments() const;
  // @@protoc_insertion_point(class_scope:rayvisiongrpc.SegmentationResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SegmentationResult& from_msg);
    ::google::protobuf::RepeatedPtrField< ::rayvisiongrpc::ImageData > segments_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RayVision_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ImageData

// int32 width = 1;
inline void ImageData::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0;
}
inline ::int32_t ImageData::width() const {
  // @@protoc_insertion_point(field_get:rayvisiongrpc.ImageData.width)
  return _internal_width();
}
inline void ImageData::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:rayvisiongrpc.ImageData.width)
}
inline ::int32_t ImageData::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void ImageData::_internal_set_width(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// int32 height = 2;
inline void ImageData::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0;
}
inline ::int32_t ImageData::height() const {
  // @@protoc_insertion_point(field_get:rayvisiongrpc.ImageData.height)
  return _internal_height();
}
inline void ImageData::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:rayvisiongrpc.ImageData.height)
}
inline ::int32_t ImageData::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void ImageData::_internal_set_height(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// .rayvisiongrpc.ColorSpace colorspace = 3;
inline void ImageData::clear_colorspace() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.colorspace_ = 0;
}
inline ::rayvisiongrpc::ColorSpace ImageData::colorspace() const {
  // @@protoc_insertion_point(field_get:rayvisiongrpc.ImageData.colorspace)
  return _internal_colorspace();
}
inline void ImageData::set_colorspace(::rayvisiongrpc::ColorSpace value) {
  _internal_set_colorspace(value);
  // @@protoc_insertion_point(field_set:rayvisiongrpc.ImageData.colorspace)
}
inline ::rayvisiongrpc::ColorSpace ImageData::_internal_colorspace() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::rayvisiongrpc::ColorSpace>(_impl_.colorspace_);
}
inline void ImageData::_internal_set_colorspace(::rayvisiongrpc::ColorSpace value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.colorspace_ = value;
}

// bytes buffer = 4;
inline void ImageData::clear_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_.ClearToEmpty();
}
inline const std::string& ImageData::buffer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rayvisiongrpc.ImageData.buffer)
  return _internal_buffer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ImageData::set_buffer(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:rayvisiongrpc.ImageData.buffer)
}
inline std::string* ImageData::mutable_buffer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:rayvisiongrpc.ImageData.buffer)
  return _s;
}
inline const std::string& ImageData::_internal_buffer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.buffer_.Get();
}
inline void ImageData::_internal_set_buffer(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_.Set(value, GetArena());
}
inline std::string* ImageData::_internal_mutable_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.buffer_.Mutable( GetArena());
}
inline std::string* ImageData::release_buffer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:rayvisiongrpc.ImageData.buffer)
  return _impl_.buffer_.Release();
}
inline void ImageData::set_allocated_buffer(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.buffer_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.buffer_.IsDefault()) {
    _impl_.buffer_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:rayvisiongrpc.ImageData.buffer)
}

// -------------------------------------------------------------------

// GetImageRequest

// .rayvisiongrpc.CameraType type = 1;
inline void GetImageRequest::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::rayvisiongrpc::CameraType GetImageRequest::type() const {
  // @@protoc_insertion_point(field_get:rayvisiongrpc.GetImageRequest.type)
  return _internal_type();
}
inline void GetImageRequest::set_type(::rayvisiongrpc::CameraType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:rayvisiongrpc.GetImageRequest.type)
}
inline ::rayvisiongrpc::CameraType GetImageRequest::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::rayvisiongrpc::CameraType>(_impl_.type_);
}
inline void GetImageRequest::_internal_set_type(::rayvisiongrpc::CameraType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// SegmentationResult

// repeated .rayvisiongrpc.ImageData segments = 1;
inline int SegmentationResult::_internal_segments_size() const {
  return _internal_segments().size();
}
inline int SegmentationResult::segments_size() const {
  return _internal_segments_size();
}
inline void SegmentationResult::clear_segments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.segments_.Clear();
}
inline ::rayvisiongrpc::ImageData* SegmentationResult::mutable_segments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:rayvisiongrpc.SegmentationResult.segments)
  return _internal_mutable_segments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::rayvisiongrpc::ImageData>* SegmentationResult::mutable_segments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:rayvisiongrpc.SegmentationResult.segments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_segments();
}
inline const ::rayvisiongrpc::ImageData& SegmentationResult::segments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:rayvisiongrpc.SegmentationResult.segments)
  return _internal_segments().Get(index);
}
inline ::rayvisiongrpc::ImageData* SegmentationResult::add_segments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::rayvisiongrpc::ImageData* _add = _internal_mutable_segments()->Add();
  // @@protoc_insertion_point(field_add:rayvisiongrpc.SegmentationResult.segments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::rayvisiongrpc::ImageData>& SegmentationResult::segments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:rayvisiongrpc.SegmentationResult.segments)
  return _internal_segments();
}
inline const ::google::protobuf::RepeatedPtrField<::rayvisiongrpc::ImageData>&
SegmentationResult::_internal_segments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.segments_;
}
inline ::google::protobuf::RepeatedPtrField<::rayvisiongrpc::ImageData>*
SegmentationResult::_internal_mutable_segments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.segments_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rayvisiongrpc


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::rayvisiongrpc::CameraType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rayvisiongrpc::CameraType>() {
  return ::rayvisiongrpc::CameraType_descriptor();
}
template <>
struct is_proto_enum<::rayvisiongrpc::ColorSpace> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::rayvisiongrpc::ColorSpace>() {
  return ::rayvisiongrpc::ColorSpace_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // RayVision_2eproto_2epb_2eh
